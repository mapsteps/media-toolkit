{"mappings":"CCAC,AAAA,WAoBA,SAAS,EAAe,CAAQ,EAC/B,IAAM,EAAM,EAAE,MAAM,CACpB,GAAI,CAAC,EAAK,OAEV,IAAM,EAAQ,EAAI,SAAS,CAC3B,GAAI,CAAC,EAAO,QAGZ,AAcD,SAAyB,CAAY,EACpC,UAAU,SAAS,CACjB,SAAS,CAAC,GACV,IAAI,CAAC,KACL,QAAQ,GAAG,CAAC,4BAA6B,EAC1C,GACC,KAAK,CAAC,AAAC,IACP,QAAQ,KAAK,CAAC,oCAAqC,EACpD,EACF,EAvBiB,GAEhB,IAAM,EAAS,SAAS,aAAa,CACpC,wCAEI,IAEL,EAAO,SAAS,CAAC,GAAG,CAAC,YAErB,WAAW,KACV,EAAO,SAAS,CAAC,MAAM,CAAC,WACzB,EAAG,MACJ,CA+BA,SAAS,EAAiC,CAAQ,EACjD,IAAM,EAAW,EAAE,MAAM,CACpB,GAEL,EAAgC,EACjC,CAEA,SAAS,EAAgC,CAA0B,EAClE,IAAM,EAAQ,EAAS,OAAO,CAAC,MAC/B,GAAI,CAAC,EAAO,OAEZ,IAAM,EAAQ,GAAO,QAAQ,SAC7B,GAAI,CAAC,EAAO,OAEZ,IAAM,EAAS,EAAM,aAAa,CAAC,mBACnC,GAAI,CAAC,EAAQ,OAEb,IAAM,EAAY,EAAS,OAAO,CAC5B,EAAS,EAAO,gBAAgB,CAAC,SAEnC,GACH,EAAO,SAAS,CAAC,MAAM,CAAC,gBAExB,EAAO,OAAO,CAAC,AAAC,IACf,EAAM,QAAQ,CAAG,CAAA,CAClB,KAEA,EAAO,SAAS,CAAC,GAAG,CAAC,gBAErB,EAAO,OAAO,CAAC,AAAC,IACf,EAAM,QAAQ,CAAG,CAAA,CAClB,GAEF,CApGC,AAiDD,CAAA,WAEC,GAAI,CADS,SAAS,aAAa,CAAC,mCACzB,OAEX,IAAM,EAA4B,SAAS,cAAc,CACxD,iDAGI,IAEL,EAAgC,GAEhC,EAA0B,gBAAgB,CACzC,SACA,GAEF,CAAA,IAhEC,AAGD,WACC,IAAM,EAAU,SAAS,aAAa,CAAC,yBACvC,GAAI,CAAC,EAAS,OAEd,IAAM,EAAO,EAAQ,gBAAgB,CAAC,OACjC,CAAA,EAAK,MAAM,EAEhB,EAAK,OAAO,CAAC,AAAC,IACb,EAAI,gBAAgB,CAAC,QAAS,EAC/B,EACD,GAuFD","sources":["<anon>","assets-src/js/settings-page.ts"],"sourcesContent":["(() => {\n(function() {\n    init();\n    function init() {\n        setupFieldsInteraction();\n        setupTemplateTags();\n    }\n    function setupTemplateTags() {\n        const metabox = document.querySelector(\".mediatk-tags-metabox\");\n        if (!metabox) return;\n        const tags = metabox.querySelectorAll(\"code\");\n        if (!tags.length) return;\n        tags.forEach((tag)=>{\n            tag.addEventListener(\"click\", handleTagClick);\n        });\n    }\n    function handleTagClick(e) {\n        const tag = e.target;\n        if (!tag) return;\n        const value = tag.innerText;\n        if (!value) return;\n        // Copy value to clipboard.\n        copyToClipboard(value);\n        const notice = document.createElement(\".mediatk-tags-metabox .action-status\");\n        if (!notice) return;\n        notice.classList.add(\"is-shown\");\n        setTimeout(()=>{\n            notice.classList.remove(\"is-shown\");\n        }, 1500);\n    }\n    function copyToClipboard(text) {\n        navigator.clipboard.writeText(text).then(()=>{\n            console.log(\"Text copied to clipboard:\", text);\n        }).catch((err)=>{\n            console.error(\"Unable to copy text to clipboard:\", err);\n        });\n    }\n    function setupFieldsInteraction() {\n        const form = document.querySelector(\"form.mediatoolkit-settings-form\");\n        if (!form) return;\n        const replaceOriginalImageField = document.getElementById(\"mediatoolkit_settings[replace_original_image]\");\n        if (!replaceOriginalImageField) return;\n        handleReplaceOriginalImageState(replaceOriginalImageField);\n        replaceOriginalImageField.addEventListener(\"change\", handleReplaceOriginalImageChange);\n    }\n    function handleReplaceOriginalImageChange(e) {\n        const checkbox = e.target;\n        if (!checkbox) return;\n        handleReplaceOriginalImageState(checkbox);\n    }\n    function handleReplaceOriginalImageState(checkbox) {\n        const trTag = checkbox.closest(\"tr\");\n        if (!trTag) return;\n        const table = trTag?.closest(\"table\");\n        if (!table) return;\n        const trTag2 = table.querySelector(\"tr:nth-child(2)\");\n        if (!trTag2) return;\n        const isChecked = checkbox.checked;\n        const inputs = trTag2.querySelectorAll(\"input\");\n        if (isChecked) {\n            trTag2.classList.remove(\"row-disabled\");\n            inputs.forEach((input)=>{\n                input.readOnly = false;\n            });\n        } else {\n            trTag2.classList.add(\"row-disabled\");\n            inputs.forEach((input)=>{\n                input.readOnly = true;\n            });\n        }\n    }\n})();\n\n})();\n//# sourceMappingURL=settings-page.js.map\n","(function () {\n\tinit();\n\n\tfunction init() {\n\t\tsetupFieldsInteraction();\n\t\tsetupTemplateTags();\n\t}\n\n\tfunction setupTemplateTags() {\n\t\tconst metabox = document.querySelector(\".mediatk-tags-metabox\");\n\t\tif (!metabox) return;\n\n\t\tconst tags = metabox.querySelectorAll(\"code\");\n\t\tif (!tags.length) return;\n\n\t\ttags.forEach((tag) => {\n\t\t\ttag.addEventListener(\"click\", handleTagClick);\n\t\t});\n\t}\n\n\tfunction handleTagClick(e: Event) {\n\t\tconst tag = e.target as HTMLElement | null;\n\t\tif (!tag) return;\n\n\t\tconst value = tag.innerText;\n\t\tif (!value) return;\n\n\t\t// Copy value to clipboard.\n\t\tcopyToClipboard(value);\n\n\t\tconst notice = document.createElement(\n\t\t\t\".mediatk-tags-metabox .action-status\"\n\t\t) as HTMLElement | null;\n\t\tif (!notice) return;\n\n\t\tnotice.classList.add(\"is-shown\");\n\n\t\tsetTimeout(() => {\n\t\t\tnotice.classList.remove(\"is-shown\");\n\t\t}, 1500);\n\t}\n\n\tfunction copyToClipboard(text: string) {\n\t\tnavigator.clipboard\n\t\t\t.writeText(text)\n\t\t\t.then(() => {\n\t\t\t\tconsole.log(\"Text copied to clipboard:\", text);\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.error(\"Unable to copy text to clipboard:\", err);\n\t\t\t});\n\t}\n\n\tfunction setupFieldsInteraction() {\n\t\tconst form = document.querySelector(\"form.mediatoolkit-settings-form\");\n\t\tif (!form) return;\n\n\t\tconst replaceOriginalImageField = document.getElementById(\n\t\t\t\"mediatoolkit_settings[replace_original_image]\"\n\t\t) as HTMLInputElement | null;\n\n\t\tif (!replaceOriginalImageField) return;\n\n\t\thandleReplaceOriginalImageState(replaceOriginalImageField);\n\n\t\treplaceOriginalImageField.addEventListener(\n\t\t\t\"change\",\n\t\t\thandleReplaceOriginalImageChange\n\t\t);\n\t}\n\n\tfunction handleReplaceOriginalImageChange(e: Event) {\n\t\tconst checkbox = e.target as HTMLInputElement;\n\t\tif (!checkbox) return;\n\n\t\thandleReplaceOriginalImageState(checkbox);\n\t}\n\n\tfunction handleReplaceOriginalImageState(checkbox: HTMLInputElement) {\n\t\tconst trTag = checkbox.closest(\"tr\");\n\t\tif (!trTag) return;\n\n\t\tconst table = trTag?.closest(\"table\");\n\t\tif (!table) return;\n\n\t\tconst trTag2 = table.querySelector(\"tr:nth-child(2)\");\n\t\tif (!trTag2) return;\n\n\t\tconst isChecked = checkbox.checked;\n\t\tconst inputs = trTag2.querySelectorAll(\"input\");\n\n\t\tif (isChecked) {\n\t\t\ttrTag2.classList.remove(\"row-disabled\");\n\n\t\t\tinputs.forEach((input) => {\n\t\t\t\tinput.readOnly = false;\n\t\t\t});\n\t\t} else {\n\t\t\ttrTag2.classList.add(\"row-disabled\");\n\n\t\t\tinputs.forEach((input) => {\n\t\t\t\tinput.readOnly = true;\n\t\t\t});\n\t\t}\n\t}\n})();\n"],"names":["handleTagClick","e","tag","target","value","innerText","copyToClipboard","text","navigator","clipboard","writeText","then","console","log","catch","err","error","notice","document","createElement","classList","add","setTimeout","remove","handleReplaceOriginalImageChange","checkbox","handleReplaceOriginalImageState","trTag","closest","table","trTag2","querySelector","isChecked","checked","inputs","querySelectorAll","forEach","input","readOnly","setupFieldsInteraction","replaceOriginalImageField","getElementById","addEventListener","setupTemplateTags","metabox","tags","length"],"version":3,"file":"settings-page.js.map"}